// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/advent.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AdventOfCode {

  /// <summary>Holder for reflection information generated from proto/advent.proto</summary>
  public static partial class AdventReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/advent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AdventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwcm90by9hZHZlbnQucHJvdG8SDGFkdmVudG9mY29kZSJ9CgVJc3N1ZRIK",
            "CgJpZBgBIAEoAxIxChFzb2x1dGlvbl9hdHRlbXB0cxgCIAMoCzIWLmFkdmVu",
            "dG9mY29kZS5Tb2x1dGlvbhIMCgRvcGVuGAMgASgIEgwKBHllYXIYBCABKAUS",
            "CwoDZGF5GAUgASgFEgwKBHBhcnQYBiABKAUiNgoJU29sdXRpb25zEikKCXNv",
            "bHV0aW9ucxgBIAMoCzIWLmFkdmVudG9mY29kZS5Tb2x1dGlvbiJuCghTb2x1",
            "dGlvbhIMCgR5ZWFyGAEgASgFEgsKA2RheRgCIAEoBRIMCgRwYXJ0GAMgASgF",
            "EhIKCmJpZ19hbnN3ZXIYBCABKAMSFQoNc3RyaW5nX2Fuc3dlchgFIAEoCRIO",
            "CgZhbnN3ZXIYBiABKAUiRQoMU29sdmVSZXF1ZXN0EgwKBHllYXIYASABKAUS",
            "CwoDZGF5GAIgASgFEgwKBHBhcnQYAyABKAUSDAoEZGF0YRgEIAEoCSJKCg1T",
            "b2x2ZVJlc3BvbnNlEg4KBmFuc3dlchgBIAEoBRIVCg1zdHJpbmdfYW5zd2Vy",
            "GAIgASgJEhIKCmJpZ19hbnN3ZXIYAyABKAMiWAoNVXBsb2FkUmVxdWVzdBIM",
            "CgR5ZWFyGAEgASgFEgsKA2RheRgCIAEoBRIMCgRkYXRhGAMgASgJEhAKCGR1",
            "YWxfZGF5GAQgASgIEgwKBHBhcnQYBSABKAUiEAoOVXBsb2FkUmVzcG9uc2Ui",
            "OQoOR2V0RGF0YVJlcXVlc3QSDAoEeWVhchgBIAEoBRILCgNkYXkYAiABKAUS",
            "DAoEcGFydBgDIAEoBSIfCg9HZXREYXRhUmVzcG9uc2USDAoEZGF0YRgBIAEo",
            "CSIxCg9SZWdpc3RlclJlcXVlc3QSEAoIY2FsbGJhY2sYASABKAkSDAoEeWVh",
            "chgCIAEoBSISChBSZWdpc3RlclJlc3BvbnNlIj4KEkFkZFNvbHV0aW9uUmVx",
            "dWVzdBIoCghzb2x1dGlvbhgBIAEoCzIWLmFkdmVudG9mY29kZS5Tb2x1dGlv",
            "biIVChNBZGRTb2x1dGlvblJlc3BvbnNlIj0KEkdldFNvbHV0aW9uUmVxdWVz",
            "dBIMCgR5ZWFyGAEgASgFEgsKA2RheRgCIAEoBRIMCgRwYXJ0GAMgASgFIj8K",
            "E0dldFNvbHV0aW9uUmVzcG9uc2USKAoIc29sdXRpb24YASABKAsyFi5hZHZl",
            "bnRvZmNvZGUuU29sdXRpb24iIgoQU2V0Q29va2llUmVxdWVzdBIOCgZjb29r",
            "aWUYASABKAkiEwoRU2V0Q29va2llUmVzcG9uc2UyWQoTQWR2ZW50T2ZDb2Rl",
            "U2VydmljZRJCCgVTb2x2ZRIaLmFkdmVudG9mY29kZS5Tb2x2ZVJlcXVlc3Qa",
            "Gy5hZHZlbnRvZmNvZGUuU29sdmVSZXNwb25zZSIAMq0DChtBZHZlbnRPZkNv",
            "ZGVJbnRlcm5hbFNlcnZpY2USRQoGVXBsb2FkEhsuYWR2ZW50b2Zjb2RlLlVw",
            "bG9hZFJlcXVlc3QaHC5hZHZlbnRvZmNvZGUuVXBsb2FkUmVzcG9uc2UiABJL",
            "CghSZWdpc3RlchIdLmFkdmVudG9mY29kZS5SZWdpc3RlclJlcXVlc3QaHi5h",
            "ZHZlbnRvZmNvZGUuUmVnaXN0ZXJSZXNwb25zZSIAElQKC0FkZFNvbHV0aW9u",
            "EiAuYWR2ZW50b2Zjb2RlLkFkZFNvbHV0aW9uUmVxdWVzdBohLmFkdmVudG9m",
            "Y29kZS5BZGRTb2x1dGlvblJlc3BvbnNlIgASVAoLR2V0U29sdXRpb24SIC5h",
            "ZHZlbnRvZmNvZGUuR2V0U29sdXRpb25SZXF1ZXN0GiEuYWR2ZW50b2Zjb2Rl",
            "LkdldFNvbHV0aW9uUmVzcG9uc2UiABJOCglTZXRDb29raWUSHi5hZHZlbnRv",
            "ZmNvZGUuU2V0Q29va2llUmVxdWVzdBofLmFkdmVudG9mY29kZS5TZXRDb29r",
            "aWVSZXNwb25zZSIAMlMKDVNvbHZlclNlcnZpY2USQgoFU29sdmUSGi5hZHZl",
            "bnRvZmNvZGUuU29sdmVSZXF1ZXN0GhsuYWR2ZW50b2Zjb2RlLlNvbHZlUmVz",
            "cG9uc2UiAEI7WipnaXRodWIuY29tL2Jyb3RoZXJsb2dpYy9hZHZlbnRvZmNv",
            "ZGUvcHJvdG+qAgxBZHZlbnRPZkNvZGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.Issue), global::AdventOfCode.Issue.Parser, new[]{ "Id", "SolutionAttempts", "Open", "Year", "Day", "Part" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.Solutions), global::AdventOfCode.Solutions.Parser, new[]{ "Solutions_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.Solution), global::AdventOfCode.Solution.Parser, new[]{ "Year", "Day", "Part", "BigAnswer", "StringAnswer", "Answer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.SolveRequest), global::AdventOfCode.SolveRequest.Parser, new[]{ "Year", "Day", "Part", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.SolveResponse), global::AdventOfCode.SolveResponse.Parser, new[]{ "Answer", "StringAnswer", "BigAnswer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.UploadRequest), global::AdventOfCode.UploadRequest.Parser, new[]{ "Year", "Day", "Data", "DualDay", "Part" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.UploadResponse), global::AdventOfCode.UploadResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.GetDataRequest), global::AdventOfCode.GetDataRequest.Parser, new[]{ "Year", "Day", "Part" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.GetDataResponse), global::AdventOfCode.GetDataResponse.Parser, new[]{ "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.RegisterRequest), global::AdventOfCode.RegisterRequest.Parser, new[]{ "Callback", "Year" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.RegisterResponse), global::AdventOfCode.RegisterResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.AddSolutionRequest), global::AdventOfCode.AddSolutionRequest.Parser, new[]{ "Solution" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.AddSolutionResponse), global::AdventOfCode.AddSolutionResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.GetSolutionRequest), global::AdventOfCode.GetSolutionRequest.Parser, new[]{ "Year", "Day", "Part" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.GetSolutionResponse), global::AdventOfCode.GetSolutionResponse.Parser, new[]{ "Solution" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.SetCookieRequest), global::AdventOfCode.SetCookieRequest.Parser, new[]{ "Cookie" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AdventOfCode.SetCookieResponse), global::AdventOfCode.SetCookieResponse.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Issue : pb::IMessage<Issue> {
    private static readonly pb::MessageParser<Issue> _parser = new pb::MessageParser<Issue>(() => new Issue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Issue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Issue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Issue(Issue other) : this() {
      id_ = other.id_;
      solutionAttempts_ = other.solutionAttempts_.Clone();
      open_ = other.open_;
      year_ = other.year_;
      day_ = other.day_;
      part_ = other.part_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Issue Clone() {
      return new Issue(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "solution_attempts" field.</summary>
    public const int SolutionAttemptsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AdventOfCode.Solution> _repeated_solutionAttempts_codec
        = pb::FieldCodec.ForMessage(18, global::AdventOfCode.Solution.Parser);
    private readonly pbc::RepeatedField<global::AdventOfCode.Solution> solutionAttempts_ = new pbc::RepeatedField<global::AdventOfCode.Solution>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AdventOfCode.Solution> SolutionAttempts {
      get { return solutionAttempts_; }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 3;
    private bool open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 4;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 5;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "part" field.</summary>
    public const int PartFieldNumber = 6;
    private int part_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Part {
      get { return part_; }
      set {
        part_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Issue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Issue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!solutionAttempts_.Equals(other.solutionAttempts_)) return false;
      if (Open != other.Open) return false;
      if (Year != other.Year) return false;
      if (Day != other.Day) return false;
      if (Part != other.Part) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      hash ^= solutionAttempts_.GetHashCode();
      if (Open != false) hash ^= Open.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Part != 0) hash ^= Part.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      solutionAttempts_.WriteTo(output, _repeated_solutionAttempts_codec);
      if (Open != false) {
        output.WriteRawTag(24);
        output.WriteBool(Open);
      }
      if (Year != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Year);
      }
      if (Day != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Day);
      }
      if (Part != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Part);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += solutionAttempts_.CalculateSize(_repeated_solutionAttempts_codec);
      if (Open != false) {
        size += 1 + 1;
      }
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Part != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Part);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Issue other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      solutionAttempts_.Add(other.solutionAttempts_);
      if (other.Open != false) {
        Open = other.Open;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Part != 0) {
        Part = other.Part;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            solutionAttempts_.AddEntriesFrom(input, _repeated_solutionAttempts_codec);
            break;
          }
          case 24: {
            Open = input.ReadBool();
            break;
          }
          case 32: {
            Year = input.ReadInt32();
            break;
          }
          case 40: {
            Day = input.ReadInt32();
            break;
          }
          case 48: {
            Part = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Solutions : pb::IMessage<Solutions> {
    private static readonly pb::MessageParser<Solutions> _parser = new pb::MessageParser<Solutions>(() => new Solutions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Solutions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solutions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solutions(Solutions other) : this() {
      solutions_ = other.solutions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solutions Clone() {
      return new Solutions(this);
    }

    /// <summary>Field number for the "solutions" field.</summary>
    public const int Solutions_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::AdventOfCode.Solution> _repeated_solutions_codec
        = pb::FieldCodec.ForMessage(10, global::AdventOfCode.Solution.Parser);
    private readonly pbc::RepeatedField<global::AdventOfCode.Solution> solutions_ = new pbc::RepeatedField<global::AdventOfCode.Solution>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AdventOfCode.Solution> Solutions_ {
      get { return solutions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Solutions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Solutions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!solutions_.Equals(other.solutions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= solutions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      solutions_.WriteTo(output, _repeated_solutions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += solutions_.CalculateSize(_repeated_solutions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Solutions other) {
      if (other == null) {
        return;
      }
      solutions_.Add(other.solutions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            solutions_.AddEntriesFrom(input, _repeated_solutions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Solution : pb::IMessage<Solution> {
    private static readonly pb::MessageParser<Solution> _parser = new pb::MessageParser<Solution>(() => new Solution());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Solution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solution(Solution other) : this() {
      year_ = other.year_;
      day_ = other.day_;
      part_ = other.part_;
      bigAnswer_ = other.bigAnswer_;
      stringAnswer_ = other.stringAnswer_;
      answer_ = other.answer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solution Clone() {
      return new Solution(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "part" field.</summary>
    public const int PartFieldNumber = 3;
    private int part_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Part {
      get { return part_; }
      set {
        part_ = value;
      }
    }

    /// <summary>Field number for the "big_answer" field.</summary>
    public const int BigAnswerFieldNumber = 4;
    private long bigAnswer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BigAnswer {
      get { return bigAnswer_; }
      set {
        bigAnswer_ = value;
      }
    }

    /// <summary>Field number for the "string_answer" field.</summary>
    public const int StringAnswerFieldNumber = 5;
    private string stringAnswer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringAnswer {
      get { return stringAnswer_; }
      set {
        stringAnswer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "answer" field.</summary>
    public const int AnswerFieldNumber = 6;
    private int answer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Answer {
      get { return answer_; }
      set {
        answer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Solution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Solution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Day != other.Day) return false;
      if (Part != other.Part) return false;
      if (BigAnswer != other.BigAnswer) return false;
      if (StringAnswer != other.StringAnswer) return false;
      if (Answer != other.Answer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Part != 0) hash ^= Part.GetHashCode();
      if (BigAnswer != 0L) hash ^= BigAnswer.GetHashCode();
      if (StringAnswer.Length != 0) hash ^= StringAnswer.GetHashCode();
      if (Answer != 0) hash ^= Answer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Day != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Day);
      }
      if (Part != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Part);
      }
      if (BigAnswer != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BigAnswer);
      }
      if (StringAnswer.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(StringAnswer);
      }
      if (Answer != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Answer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Part != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Part);
      }
      if (BigAnswer != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BigAnswer);
      }
      if (StringAnswer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringAnswer);
      }
      if (Answer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Answer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Solution other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Part != 0) {
        Part = other.Part;
      }
      if (other.BigAnswer != 0L) {
        BigAnswer = other.BigAnswer;
      }
      if (other.StringAnswer.Length != 0) {
        StringAnswer = other.StringAnswer;
      }
      if (other.Answer != 0) {
        Answer = other.Answer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            Day = input.ReadInt32();
            break;
          }
          case 24: {
            Part = input.ReadInt32();
            break;
          }
          case 32: {
            BigAnswer = input.ReadInt64();
            break;
          }
          case 42: {
            StringAnswer = input.ReadString();
            break;
          }
          case 48: {
            Answer = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SolveRequest : pb::IMessage<SolveRequest> {
    private static readonly pb::MessageParser<SolveRequest> _parser = new pb::MessageParser<SolveRequest>(() => new SolveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolveRequest(SolveRequest other) : this() {
      year_ = other.year_;
      day_ = other.day_;
      part_ = other.part_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolveRequest Clone() {
      return new SolveRequest(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "part" field.</summary>
    public const int PartFieldNumber = 3;
    private int part_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Part {
      get { return part_; }
      set {
        part_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Day != other.Day) return false;
      if (Part != other.Part) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Part != 0) hash ^= Part.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Day != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Day);
      }
      if (Part != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Part);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Part != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Part);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolveRequest other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Part != 0) {
        Part = other.Part;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            Day = input.ReadInt32();
            break;
          }
          case 24: {
            Part = input.ReadInt32();
            break;
          }
          case 34: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SolveResponse : pb::IMessage<SolveResponse> {
    private static readonly pb::MessageParser<SolveResponse> _parser = new pb::MessageParser<SolveResponse>(() => new SolveResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolveResponse(SolveResponse other) : this() {
      answer_ = other.answer_;
      stringAnswer_ = other.stringAnswer_;
      bigAnswer_ = other.bigAnswer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolveResponse Clone() {
      return new SolveResponse(this);
    }

    /// <summary>Field number for the "answer" field.</summary>
    public const int AnswerFieldNumber = 1;
    private int answer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Answer {
      get { return answer_; }
      set {
        answer_ = value;
      }
    }

    /// <summary>Field number for the "string_answer" field.</summary>
    public const int StringAnswerFieldNumber = 2;
    private string stringAnswer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringAnswer {
      get { return stringAnswer_; }
      set {
        stringAnswer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "big_answer" field.</summary>
    public const int BigAnswerFieldNumber = 3;
    private long bigAnswer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BigAnswer {
      get { return bigAnswer_; }
      set {
        bigAnswer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Answer != other.Answer) return false;
      if (StringAnswer != other.StringAnswer) return false;
      if (BigAnswer != other.BigAnswer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Answer != 0) hash ^= Answer.GetHashCode();
      if (StringAnswer.Length != 0) hash ^= StringAnswer.GetHashCode();
      if (BigAnswer != 0L) hash ^= BigAnswer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Answer != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Answer);
      }
      if (StringAnswer.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StringAnswer);
      }
      if (BigAnswer != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BigAnswer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Answer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Answer);
      }
      if (StringAnswer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringAnswer);
      }
      if (BigAnswer != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BigAnswer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolveResponse other) {
      if (other == null) {
        return;
      }
      if (other.Answer != 0) {
        Answer = other.Answer;
      }
      if (other.StringAnswer.Length != 0) {
        StringAnswer = other.StringAnswer;
      }
      if (other.BigAnswer != 0L) {
        BigAnswer = other.BigAnswer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Answer = input.ReadInt32();
            break;
          }
          case 18: {
            StringAnswer = input.ReadString();
            break;
          }
          case 24: {
            BigAnswer = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UploadRequest : pb::IMessage<UploadRequest> {
    private static readonly pb::MessageParser<UploadRequest> _parser = new pb::MessageParser<UploadRequest>(() => new UploadRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UploadRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadRequest(UploadRequest other) : this() {
      year_ = other.year_;
      day_ = other.day_;
      data_ = other.data_;
      dualDay_ = other.dualDay_;
      part_ = other.part_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadRequest Clone() {
      return new UploadRequest(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dual_day" field.</summary>
    public const int DualDayFieldNumber = 4;
    private bool dualDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DualDay {
      get { return dualDay_; }
      set {
        dualDay_ = value;
      }
    }

    /// <summary>Field number for the "part" field.</summary>
    public const int PartFieldNumber = 5;
    private int part_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Part {
      get { return part_; }
      set {
        part_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UploadRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UploadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Day != other.Day) return false;
      if (Data != other.Data) return false;
      if (DualDay != other.DualDay) return false;
      if (Part != other.Part) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (DualDay != false) hash ^= DualDay.GetHashCode();
      if (Part != 0) hash ^= Part.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Day != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Day);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
      if (DualDay != false) {
        output.WriteRawTag(32);
        output.WriteBool(DualDay);
      }
      if (Part != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Part);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (DualDay != false) {
        size += 1 + 1;
      }
      if (Part != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Part);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UploadRequest other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.DualDay != false) {
        DualDay = other.DualDay;
      }
      if (other.Part != 0) {
        Part = other.Part;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            Day = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
          case 32: {
            DualDay = input.ReadBool();
            break;
          }
          case 40: {
            Part = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UploadResponse : pb::IMessage<UploadResponse> {
    private static readonly pb::MessageParser<UploadResponse> _parser = new pb::MessageParser<UploadResponse>(() => new UploadResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UploadResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadResponse(UploadResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadResponse Clone() {
      return new UploadResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UploadResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UploadResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UploadResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetDataRequest : pb::IMessage<GetDataRequest> {
    private static readonly pb::MessageParser<GetDataRequest> _parser = new pb::MessageParser<GetDataRequest>(() => new GetDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataRequest(GetDataRequest other) : this() {
      year_ = other.year_;
      day_ = other.day_;
      part_ = other.part_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataRequest Clone() {
      return new GetDataRequest(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "part" field.</summary>
    public const int PartFieldNumber = 3;
    private int part_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Part {
      get { return part_; }
      set {
        part_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Day != other.Day) return false;
      if (Part != other.Part) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Part != 0) hash ^= Part.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Day != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Day);
      }
      if (Part != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Part);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Part != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Part);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Part != 0) {
        Part = other.Part;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            Day = input.ReadInt32();
            break;
          }
          case 24: {
            Part = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDataResponse : pb::IMessage<GetDataResponse> {
    private static readonly pb::MessageParser<GetDataResponse> _parser = new pb::MessageParser<GetDataResponse>(() => new GetDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataResponse(GetDataResponse other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataResponse Clone() {
      return new GetDataResponse(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterRequest : pb::IMessage<RegisterRequest> {
    private static readonly pb::MessageParser<RegisterRequest> _parser = new pb::MessageParser<RegisterRequest>(() => new RegisterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest(RegisterRequest other) : this() {
      callback_ = other.callback_;
      year_ = other.year_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest Clone() {
      return new RegisterRequest(this);
    }

    /// <summary>Field number for the "callback" field.</summary>
    public const int CallbackFieldNumber = 1;
    private string callback_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Callback {
      get { return callback_; }
      set {
        callback_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 2;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Callback != other.Callback) return false;
      if (Year != other.Year) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Callback.Length != 0) hash ^= Callback.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Callback.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Callback);
      }
      if (Year != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Year);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Callback.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Callback);
      }
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterRequest other) {
      if (other == null) {
        return;
      }
      if (other.Callback.Length != 0) {
        Callback = other.Callback;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Callback = input.ReadString();
            break;
          }
          case 16: {
            Year = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterResponse : pb::IMessage<RegisterResponse> {
    private static readonly pb::MessageParser<RegisterResponse> _parser = new pb::MessageParser<RegisterResponse>(() => new RegisterResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse(RegisterResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse Clone() {
      return new RegisterResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AddSolutionRequest : pb::IMessage<AddSolutionRequest> {
    private static readonly pb::MessageParser<AddSolutionRequest> _parser = new pb::MessageParser<AddSolutionRequest>(() => new AddSolutionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddSolutionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSolutionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSolutionRequest(AddSolutionRequest other) : this() {
      solution_ = other.solution_ != null ? other.solution_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSolutionRequest Clone() {
      return new AddSolutionRequest(this);
    }

    /// <summary>Field number for the "solution" field.</summary>
    public const int SolutionFieldNumber = 1;
    private global::AdventOfCode.Solution solution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AdventOfCode.Solution Solution {
      get { return solution_; }
      set {
        solution_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddSolutionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddSolutionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Solution, other.Solution)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (solution_ != null) hash ^= Solution.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (solution_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Solution);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (solution_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Solution);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddSolutionRequest other) {
      if (other == null) {
        return;
      }
      if (other.solution_ != null) {
        if (solution_ == null) {
          Solution = new global::AdventOfCode.Solution();
        }
        Solution.MergeFrom(other.Solution);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (solution_ == null) {
              Solution = new global::AdventOfCode.Solution();
            }
            input.ReadMessage(Solution);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddSolutionResponse : pb::IMessage<AddSolutionResponse> {
    private static readonly pb::MessageParser<AddSolutionResponse> _parser = new pb::MessageParser<AddSolutionResponse>(() => new AddSolutionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddSolutionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSolutionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSolutionResponse(AddSolutionResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSolutionResponse Clone() {
      return new AddSolutionResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddSolutionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddSolutionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddSolutionResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetSolutionRequest : pb::IMessage<GetSolutionRequest> {
    private static readonly pb::MessageParser<GetSolutionRequest> _parser = new pb::MessageParser<GetSolutionRequest>(() => new GetSolutionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSolutionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSolutionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSolutionRequest(GetSolutionRequest other) : this() {
      year_ = other.year_;
      day_ = other.day_;
      part_ = other.part_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSolutionRequest Clone() {
      return new GetSolutionRequest(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "part" field.</summary>
    public const int PartFieldNumber = 3;
    private int part_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Part {
      get { return part_; }
      set {
        part_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSolutionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSolutionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Day != other.Day) return false;
      if (Part != other.Part) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Part != 0) hash ^= Part.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Day != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Day);
      }
      if (Part != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Part);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Part != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Part);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSolutionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Part != 0) {
        Part = other.Part;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            Day = input.ReadInt32();
            break;
          }
          case 24: {
            Part = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSolutionResponse : pb::IMessage<GetSolutionResponse> {
    private static readonly pb::MessageParser<GetSolutionResponse> _parser = new pb::MessageParser<GetSolutionResponse>(() => new GetSolutionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSolutionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSolutionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSolutionResponse(GetSolutionResponse other) : this() {
      solution_ = other.solution_ != null ? other.solution_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSolutionResponse Clone() {
      return new GetSolutionResponse(this);
    }

    /// <summary>Field number for the "solution" field.</summary>
    public const int SolutionFieldNumber = 1;
    private global::AdventOfCode.Solution solution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AdventOfCode.Solution Solution {
      get { return solution_; }
      set {
        solution_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSolutionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSolutionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Solution, other.Solution)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (solution_ != null) hash ^= Solution.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (solution_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Solution);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (solution_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Solution);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSolutionResponse other) {
      if (other == null) {
        return;
      }
      if (other.solution_ != null) {
        if (solution_ == null) {
          Solution = new global::AdventOfCode.Solution();
        }
        Solution.MergeFrom(other.Solution);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (solution_ == null) {
              Solution = new global::AdventOfCode.Solution();
            }
            input.ReadMessage(Solution);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetCookieRequest : pb::IMessage<SetCookieRequest> {
    private static readonly pb::MessageParser<SetCookieRequest> _parser = new pb::MessageParser<SetCookieRequest>(() => new SetCookieRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetCookieRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCookieRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCookieRequest(SetCookieRequest other) : this() {
      cookie_ = other.cookie_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCookieRequest Clone() {
      return new SetCookieRequest(this);
    }

    /// <summary>Field number for the "cookie" field.</summary>
    public const int CookieFieldNumber = 1;
    private string cookie_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cookie {
      get { return cookie_; }
      set {
        cookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetCookieRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetCookieRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cookie != other.Cookie) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cookie.Length != 0) hash ^= Cookie.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cookie.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cookie);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cookie);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetCookieRequest other) {
      if (other == null) {
        return;
      }
      if (other.Cookie.Length != 0) {
        Cookie = other.Cookie;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Cookie = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetCookieResponse : pb::IMessage<SetCookieResponse> {
    private static readonly pb::MessageParser<SetCookieResponse> _parser = new pb::MessageParser<SetCookieResponse>(() => new SetCookieResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetCookieResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AdventOfCode.AdventReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCookieResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCookieResponse(SetCookieResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCookieResponse Clone() {
      return new SetCookieResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetCookieResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetCookieResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetCookieResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
